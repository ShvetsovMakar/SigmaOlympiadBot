from aiogram import *
from aiogram.fsm.context import FSMContext

from main_bot.config import *

from core.states import MainSG
from core import keyboards
from core import strings

from results.day1_results import get_results_day1
from results.day2_results import get_results_day2
from results.olymp_results import get_results_olymp

results_choice_router = Router()


async def send_results(results, message, type):
    for i in range(len(results)):
        results[i] = list(results[i])
    max_len = max(len("–£—á–∞—Å—Ç–Ω–∏–∫"), len(max(results, key=lambda x: len(x[0]))[0]))

    types_dict = {
        1: "–¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í 1 –¢–£–†–ê\n"
           "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∫–∞–∑–∞–Ω –±–∞–ª–ª –∑–∞ 1, 2, 3, 4 –∏ 5 –∑–∞–¥–∞—á—É,\n",
        2: "–¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í 2 –¢–£–†–ê\n"
           "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∫–∞–∑–∞–Ω –±–∞–ª–ª –∑–∞ 6, 7, 8, 9 –∏ 10 –∑–∞–¥–∞—á—É\n",
        3: "–¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–õ–ò–ú–ü–ò–ê–î–´\n"
           "–î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞ –±–∞–ª–ª–æ–≤ –∑–∞ I –∏ II —Ç—É—Ä—ã\n"
    }

    text = types_dict[type]

    for i in range(len(results)):
        text += f'\n{i + 1}. ' + results[i][0] + ' |' + '|'.join([str(j) for j in results[i][1:]]) + '|'

    await bot.send_message(chat_id=message.chat.id,
                           text=text,
                           reply_markup=keyboards.results_choice)


@results_choice_router.message(MainSG.results_choice)
async def choice(message: types.Message, state: FSMContext):
    if message.text == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†":
        await bot.send_message(chat_id=message.chat.id,
                               text=strings.main_menu,
                               reply_markup=keyboards.main_menu)

        await state.set_state(MainSG.main_menu)

    elif message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã II —Ç—É—Ä–∞":
        if handling["results1"]:
            results = await get_results_day1()
            await send_results(results, message, type=1)

        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç—É—Ä–∞ –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                                   reply_markup=keyboards.results_choice)

    elif message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã I —Ç—É—Ä–∞":
        if handling["results2"]:
            results = await get_results_day2()
            await send_results(results, message, type=2)

        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ —Ç—É—Ä–∞ –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                                   reply_markup=keyboards.results_choice)

    elif message.text == "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã":
        if handling["results2"]:
            results = await get_results_olymp()
            await send_results(results, message, type=3)

        else:
            await bot.send_message(chat_id=message.chat.id,
                                   text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ª–∏–º–ø–∏–∞–¥—ã –µ—â—ë –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                                   reply_markup=keyboards.results_choice)

    else:
        await bot.send_message(chat_id=message.chat.id,
                               text=strings.error,
                               reply_markup=keyboards.results_choice)
